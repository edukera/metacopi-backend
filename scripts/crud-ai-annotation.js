#!/usr/bin/env node

const axios = require('axios');

// Informations d'identification pour Jean Dupont (extraites de seed-data.json)
const credentials = {
  email: 'jean.dupont@monlycee.net',
  password: 'Teacher123!'
};

// URL de base de l'API (√† ajuster selon votre environnement)
const API_BASE_URL = 'http://localhost:3002';

// ID de correction √† utiliser pour le test (√† adapter si besoin)
const TEST_CORRECTION_ID = process.env.TEST_CORRECTION_ID || 'cor_alice_gribouille_ds_8_2025_05_12_by_jean_dupont';

// G√©n√®re un ID d'annotation IA unique bas√© sur un timestamp
function generateAIAnnotationId() {
  return `AIANN-${Date.now()}`;
}

// Cr√©ation d'une valeur d'annotation IA valide (JSON s√©rialis√©)
function createAIAnnotationValue(text = 'Suggestion IA: Am√©liorer la structure', x = 150, y = 200) {
  const obj = {
    type: 'text',
    content: text,
    position: { x, y }
  };
  return JSON.stringify(obj);
}

async function main() {
  try {
    console.log('Tentative de connexion avec Jean Dupont...');
    const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, credentials);
    const token = loginResponse.data.access_token;
    if (!token) throw new Error('Pas de token re√ßu dans la r√©ponse de connexion');
    console.log('Connexion r√©ussie! Token JWT re√ßu.');
    const authHeaders = { headers: { 'Authorization': `Bearer ${token}` } };

    // 1. Cr√©er une annotation IA
    const aiAnnotationId = generateAIAnnotationId();
    const createPayload = {
      id: aiAnnotationId,
      pageId: 'p1',
      value: createAIAnnotationValue(),
      createdByEmail: 'ai-system@metacopi.com'
    };
    
    console.log(`Cr√©ation d'une annotation IA sur la correction ${TEST_CORRECTION_ID}...`);
    const createRes = await axios.post(`${API_BASE_URL}/corrections/${TEST_CORRECTION_ID}/ai-annotations`, createPayload, authHeaders);
    const createdAIAnnotation = createRes.data;
    console.log('Annotation IA cr√©√©e:', createdAIAnnotation);
    if (createdAIAnnotation.id !== aiAnnotationId) throw new Error('L\'ID retourn√© ne correspond pas √† celui envoy√©');

    // 2. R√©cup√©rer toutes les annotations IA de la correction
    console.log(`R√©cup√©ration de toutes les annotations IA pour la correction ${TEST_CORRECTION_ID}...`);
    const getAllRes = await axios.get(`${API_BASE_URL}/corrections/${TEST_CORRECTION_ID}/ai-annotations`, authHeaders);
    console.log(`${getAllRes.data.length} annotations IA trouv√©es pour cette correction`);
    
    // V√©rifier que notre annotation IA cr√©√©e est dans la liste
    const foundInList = getAllRes.data.some(ann => ann.id === aiAnnotationId);
    if (foundInList) {
      console.log('‚úÖ L\'annotation IA cr√©√©e est bien pr√©sente dans la liste');
    } else {
      console.error('‚ùå L\'annotation IA cr√©√©e n\'est pas retrouv√©e dans la liste des annotations IA');
    }

    // 3. R√©cup√©rer cette annotation IA sp√©cifique
    console.log(`R√©cup√©ration de l'annotation IA ${aiAnnotationId}...`);
    const getRes = await axios.get(`${API_BASE_URL}/corrections/${TEST_CORRECTION_ID}/ai-annotations/${aiAnnotationId}`, authHeaders);
    console.log('Annotation IA r√©cup√©r√©e:', getRes.data);

    // 4. Mettre √† jour cette annotation IA
    const updatePayload = {
      value: createAIAnnotationValue('IA: Suggestion am√©lior√©e et plus pr√©cise', 200, 250)
    };
    console.log(`Mise √† jour de l'annotation IA ${aiAnnotationId}...`);
    const updateRes = await axios.patch(`${API_BASE_URL}/corrections/${TEST_CORRECTION_ID}/ai-annotations/${aiAnnotationId}`, updatePayload, authHeaders);
    console.log('Annotation IA apr√®s mise √† jour:', updateRes.data);

    // 5. R√©cup√©rer √† nouveau pour v√©rifier la mise √† jour
    console.log(`R√©cup√©ration de l'annotation IA ${aiAnnotationId} apr√®s mise √† jour...`);
    const getAfterUpdateRes = await axios.get(`${API_BASE_URL}/corrections/${TEST_CORRECTION_ID}/ai-annotations/${aiAnnotationId}`, authHeaders);
    console.log('Annotation IA r√©cup√©r√©e apr√®s mise √† jour:', getAfterUpdateRes.data);

    // V√©rification de la mise √† jour
    const updatedValue = JSON.parse(getAfterUpdateRes.data.value);
    if (updatedValue.content === 'IA: Suggestion am√©lior√©e et plus pr√©cise') {
      console.log('‚úÖ Mise √† jour v√©rifi√©e avec succ√®s !');
    } else {
      console.error('‚ùå La mise √† jour de l\'annotation IA n\'a pas √©t√© prise en compte.');
    }

    // 6. Supprimer l'annotation IA
    console.log(`Suppression de l'annotation IA ${aiAnnotationId}...`);
    await axios.delete(`${API_BASE_URL}/corrections/${TEST_CORRECTION_ID}/ai-annotations/${aiAnnotationId}`, authHeaders);
    console.log('‚úÖ Annotation IA supprim√©e avec succ√®s (statut HTTP 204)');

    // 7. Tenter de r√©cup√©rer l'annotation IA supprim√©e pour v√©rifier qu'elle n'existe plus
    try {
      console.log(`Tentative de r√©cup√©ration de l'annotation IA supprim√©e ${aiAnnotationId}...`);
      await axios.get(`${API_BASE_URL}/corrections/${TEST_CORRECTION_ID}/ai-annotations/${aiAnnotationId}`, authHeaders);
      console.error('‚ùå L\'annotation IA existe toujours apr√®s suppression !');
    } catch (error) {
      if (error.response && error.response.status === 404) {
        console.log('‚úÖ V√©rification de suppression r√©ussie : l\'annotation IA n\'existe plus (erreur 404)');
      } else {
        throw error; // Si c'est une autre erreur, la propager
      }
    }

    console.log('üéâ Tous les tests sur les annotations IA sont termin√©s avec succ√®s !');
    
  } catch (error) {
    console.error('Erreur:', error.message);
    if (error.response) {
      console.error('D√©tails de l\'erreur:', {
        status: error.response.status,
        data: error.response.data
      });
    }
  }
}

main(); 