#!/usr/bin/env node

const axios = require('axios');

// Informations d'identification pour Jean Dupont (extraites de seed-data.json)
const credentials = {
  email: 'jean.dupont@monlycee.net',
  password: 'Teacher123!'
};

// URL de base de l'API (√† ajuster selon votre environnement)
const API_BASE_URL = 'http://localhost:3002';

// ID de correction √† utiliser pour le test (√† adapter si besoin)
const TEST_CORRECTION_ID = process.env.TEST_CORRECTION_ID || 'cor_alice_gribouille_ds_8_2025_05_12_by_jean_dupont';

// G√©n√®re un ID de commentaire IA unique bas√© sur un timestamp
function generateAICommentId() {
  return `AIC-${Date.now()}`;
}

async function main() {
  try {
    console.log('Tentative de connexion avec Jean Dupont...');
    const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, credentials);
    const token = loginResponse.data.access_token;
    if (!token) throw new Error('Pas de token re√ßu dans la r√©ponse de connexion');
    console.log('Connexion r√©ussie! Token JWT re√ßu.');
    const authHeaders = { headers: { 'Authorization': `Bearer ${token}` } };

    // 1. Cr√©er un commentaire IA
    const createPayload = {
      id: generateAICommentId(),
      pageId: 'p1',
      pageY: 100,
      type: 'note',
      color: '#FFD700',
      text: 'Ceci est un commentaire IA de test',
      markdown: 'Ceci est un **commentaire** IA de test',
      annotations: [],
      status: 'pending'
      // Note: correctionId sera inject√© c√¥t√© backend depuis l'URL
      // Note: createdByEmail sera automatiquement d√©fini par le service si non fourni
    };
    
    console.log(`Cr√©ation d'un commentaire IA sur la correction ${TEST_CORRECTION_ID}...`);
    const createRes = await axios.post(`${API_BASE_URL}/corrections/${TEST_CORRECTION_ID}/ai-comments`, createPayload, authHeaders);
    const createdAIComment = createRes.data;
    console.log('Commentaire IA cr√©√©:', createdAIComment);
    const aiCommentId = createdAIComment.id; // Utiliser l'ID logique, pas l'ID MongoDB
    if (!aiCommentId) throw new Error('Impossible de r√©cup√©rer l\'ID du commentaire IA cr√©√©');

    // 2. R√©cup√©rer ce commentaire IA
    console.log(`R√©cup√©ration du commentaire IA ${aiCommentId}...`);
    const getRes1 = await axios.get(`${API_BASE_URL}/corrections/${TEST_CORRECTION_ID}/ai-comments/${aiCommentId}`, authHeaders);
    console.log('Commentaire IA r√©cup√©r√©:', getRes1.data);

    // 3. Mettre √† jour ce commentaire IA
    const updatePayload = {
      text: 'Ceci est un commentaire IA de test (modifi√©)',
      markdown: 'Ceci est un **commentaire** IA de test (modifi√©)',
      status: 'validated'
    };
    console.log(`Mise √† jour du commentaire IA ${aiCommentId}...`);
    const updateRes = await axios.patch(`${API_BASE_URL}/corrections/${TEST_CORRECTION_ID}/ai-comments/${aiCommentId}`, updatePayload, authHeaders);
    console.log('Commentaire IA apr√®s update:', updateRes.data);

    // 4. R√©cup√©rer √† nouveau pour v√©rifier l'update
    console.log(`R√©cup√©ration du commentaire IA ${aiCommentId} apr√®s update...`);
    const getRes2 = await axios.get(`${API_BASE_URL}/corrections/${TEST_CORRECTION_ID}/ai-comments/${aiCommentId}`, authHeaders);
    console.log('Commentaire IA r√©cup√©r√© apr√®s update:', getRes2.data);

    // V√©rification simple
    if (getRes2.data.text === updatePayload.text && getRes2.data.status === updatePayload.status) {
      console.log('‚úÖ Mise √† jour v√©rifi√©e avec succ√®s !');
    } else {
      console.error('‚ùå La mise √† jour du commentaire IA n\'a pas √©t√© prise en compte correctement.');
    }

    // 5. Supprimer le commentaire IA
    console.log(`Suppression du commentaire IA ${aiCommentId}...`);
    await axios.delete(`${API_BASE_URL}/corrections/${TEST_CORRECTION_ID}/ai-comments/${aiCommentId}`, authHeaders);
    console.log('‚úÖ Commentaire IA supprim√© avec succ√®s (statut HTTP 204)');

    // 6. Tenter de r√©cup√©rer le commentaire IA supprim√© pour v√©rifier qu'il n'existe plus
    try {
      console.log(`Tentative de r√©cup√©ration du commentaire IA supprim√© ${aiCommentId}...`);
      await axios.get(`${API_BASE_URL}/corrections/${TEST_CORRECTION_ID}/ai-comments/${aiCommentId}`, authHeaders);
      console.error('‚ùå Le commentaire IA existe toujours apr√®s suppression !');
    } catch (error) {
      if (error.response && error.response.status === 404) {
        console.log('‚úÖ V√©rification de suppression r√©ussie : le commentaire IA n\'existe plus (erreur 404)');
      } else {
        throw error; // Si c'est une autre erreur, la propager
      }
    }

    console.log('üéâ Tous les tests sur les commentaires IA sont termin√©s avec succ√®s !');
  } catch (error) {
    console.error('Erreur:', error.message);
    if (error.response) {
      console.error('D√©tails de l\'erreur:', {
        status: error.response.status,
        data: error.response.data
      });
    }
  }
}

main(); 